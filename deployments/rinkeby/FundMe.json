{
  "address": "0xc6367f79e1f59531B321bB293ebE2a67E48562De",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x678db7eb46df5ca01571e3dbd39d412066fbae8fd2460b799e70da01d5367f97",
  "receipt": {
    "to": null,
    "from": "0x9130aC7AeB7e74E7C3fc64B315DbD0EcAFe69e63",
    "contractAddress": "0xc6367f79e1f59531B321bB293ebE2a67E48562De",
    "transactionIndex": 16,
    "gasUsed": "1058239",
    "logsBloom": "0x
    "blockHash": "0x3c0085ea5b7bfc256462350e92c3c348d3fb0328d2126090e7537b3fb3792911",
    "transactionHash": "0x678db7eb46df5ca01571e3dbd39d412066fbae8fd2460b799e70da01d5367f97",
    "logs": [],
    "blockNumber": 10851409,
    "cumulativeGasUsed": "10778714",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 3,
  "solcInputHash": "6a284081d66025a0fbb6bff3fd2cea4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pongthorn Sangkaphet\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"Practical Blockchain\",\"version\":1},\"userdoc\":{\"errors\":{\"FundMe__NotOwner()\":[{\"notice\":\"This method is allowed only ownere to do\"}]},\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for study how to develop smart contract on EVM\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//1- Import and Using For\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//2- Import internal libray without using PriceConverter for uint256;\\n//import {PriceConverter} from \\\"./PriceConverter.sol\\\";\\n\\n/**@title Practical Blockchain\\n * @author Pongthorn Sangkaphet\\n * @notice This contract is for study how to develop smart contract on EVM\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Using Libray\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 10 * 10**18;\\n    address private immutable i_owner;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    ///  This method is allowed only ownere to do\\n    error FundMe__NotOwner();\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n    // receive() external payable{\\n    //     fund();\\n    // }\\n    // fallback() external payable{\\n    //     fund();\\n    // }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        // User Memory instead of Storage  , it is so cheaper increditbly!!!!!!!!\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x538a899435e273d882eaf447f40093012eac9b181d138d0f98d887989bb45847\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n//https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n\\n\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256)\\n  {\\n    // paramer is aggPrice object\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  // call it get fiatConversionRate, since it assumes something about decimals\\n  // It wouldn't work for every aggregator\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    //10^18 is ETH\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x6b24739478c1d18e888532a5b7ac762ed77abe112869b4c336e2bfb31d026364\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200135238038062001352833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111c56200018d600039600081816102c101528181610454015281816104f901528181610683015261087901526111c56000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b3c565b6101cf565b6040516100bf9190610b82565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610b82565b60405180910390f35b6100fb6102bf565b005b34801561010957600080fd5b506101126104e9565b60405161011f9190610b82565b60405180910390f35b34801561013457600080fd5b5061013d6104f5565b60405161014a9190610bac565b60405180910390f35b34801561015f57600080fd5b5061016861051d565b6040516101759190610c26565b60405180910390f35b610186610547565b005b610190610681565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c6d565b61090f565b6040516101c69190610bac565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610caf565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610344576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103ef57600080828154811061036957610368610cdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e790610d3a565b915050610347565b50600067ffffffffffffffff81111561040b5761040a610d83565b5b6040519080825280602002602001820160405280156104395781602001602082028036833780820191505090505b506000908051906020019061044f929190610a32565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161049690610de3565b60006040518083038185875af1925050503d80600081146104d3576040519150601f19603f3d011682016040523d82523d6000602084013e6104d8565b606091505b50509050806104e657600080fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b678ac7230489e80000610585600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095690919063ffffffff16565b10156105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610e55565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106159190610e75565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610706576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561078957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161073f575b5050505050905060005b81518110156108145760008282815181106107b1576107b0610cdc565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061080c90610d3a565b915050610793565b50600067ffffffffffffffff8111156108305761082f610d83565b5b60405190808252806020026020018201604052801561085e5781602001602082028036833780820191505090505b5060009080519060200190610874929190610a32565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bb90610de3565b60006040518083038185875af1925050503d80600081146108f8576040519150601f19603f3d011682016040523d82523d6000602084013e6108fd565b606091505b505090508061090b57600080fd5b5050565b600080828154811061092457610923610cdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096283610992565b90506000670de0b6b3a7640000858361097b9190610ecb565b6109859190610f54565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109db57600080fd5b505afa1580156109ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a139190610ffd565b5050509150506402540be40081610a2a9190611078565b915050919050565b828054828255906000526020600020908101928215610aab579160200282015b82811115610aaa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a52565b5b509050610ab89190610abc565b5090565b5b80821115610ad5576000816000905550600101610abd565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0982610ade565b9050919050565b610b1981610afe565b8114610b2457600080fd5b50565b600081359050610b3681610b10565b92915050565b600060208284031215610b5257610b51610ad9565b5b6000610b6084828501610b27565b91505092915050565b6000819050919050565b610b7c81610b69565b82525050565b6000602082019050610b976000830184610b73565b92915050565b610ba681610afe565b82525050565b6000602082019050610bc16000830184610b9d565b92915050565b6000819050919050565b6000610bec610be7610be284610ade565b610bc7565b610ade565b9050919050565b6000610bfe82610bd1565b9050919050565b6000610c1082610bf3565b9050919050565b610c2081610c05565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b610c4a81610b69565b8114610c5557600080fd5b50565b600081359050610c6781610c41565b92915050565b600060208284031215610c8357610c82610ad9565b5b6000610c9184828501610c58565b91505092915050565b600081519050610ca981610c41565b92915050565b600060208284031215610cc557610cc4610ad9565b5b6000610cd384828501610c9a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4582610b69565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7857610d77610d0b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dcd600083610db2565b9150610dd882610dbd565b600082019050919050565b6000610dee82610dc0565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e3f601b83610df8565b9150610e4a82610e09565b602082019050919050565b60006020820190508181036000830152610e6e81610e32565b9050919050565b6000610e8082610b69565b9150610e8b83610b69565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec057610ebf610d0b565b5b828201905092915050565b6000610ed682610b69565b9150610ee183610b69565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f1a57610f19610d0b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5f82610b69565b9150610f6a83610b69565b925082610f7a57610f79610f25565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fa481610f85565b8114610faf57600080fd5b50565b600081519050610fc181610f9b565b92915050565b6000819050919050565b610fda81610fc7565b8114610fe557600080fd5b50565b600081519050610ff781610fd1565b92915050565b600080600080600060a0868803121561101957611018610ad9565b5b600061102788828901610fb2565b955050602061103888828901610fe8565b945050604061104988828901610c9a565b935050606061105a88828901610c9a565b925050608061106b88828901610fb2565b9150509295509295909350565b600061108382610fc7565b915061108e83610fc7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110cd576110cc610d0b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561110a57611109610d0b565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114757611146610d0b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118457611183610d0b565b5b82820290509291505056fea264697066735822122088f2bfb5864f3c10fe8e8d76492d2fd465b236c6643ce73c2b5c197cfc2d5d6064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b3c565b6101cf565b6040516100bf9190610b82565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610b82565b60405180910390f35b6100fb6102bf565b005b34801561010957600080fd5b506101126104e9565b60405161011f9190610b82565b60405180910390f35b34801561013457600080fd5b5061013d6104f5565b60405161014a9190610bac565b60405180910390f35b34801561015f57600080fd5b5061016861051d565b6040516101759190610c26565b60405180910390f35b610186610547565b005b610190610681565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c6d565b61090f565b6040516101c69190610bac565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610caf565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610344576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103ef57600080828154811061036957610368610cdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103e790610d3a565b915050610347565b50600067ffffffffffffffff81111561040b5761040a610d83565b5b6040519080825280602002602001820160405280156104395781602001602082028036833780820191505090505b506000908051906020019061044f929190610a32565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161049690610de3565b60006040518083038185875af1925050503d80600081146104d3576040519150601f19603f3d011682016040523d82523d6000602084013e6104d8565b606091505b50509050806104e657600080fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b678ac7230489e80000610585600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461095690919063ffffffff16565b10156105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610e55565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106159190610e75565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610706576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561078957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161073f575b5050505050905060005b81518110156108145760008282815181106107b1576107b0610cdc565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061080c90610d3a565b915050610793565b50600067ffffffffffffffff8111156108305761082f610d83565b5b60405190808252806020026020018201604052801561085e5781602001602082028036833780820191505090505b5060009080519060200190610874929190610a32565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108bb90610de3565b60006040518083038185875af1925050503d80600081146108f8576040519150601f19603f3d011682016040523d82523d6000602084013e6108fd565b606091505b505090508061090b57600080fd5b5050565b600080828154811061092457610923610cdc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061096283610992565b90506000670de0b6b3a7640000858361097b9190610ecb565b6109859190610f54565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109db57600080fd5b505afa1580156109ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a139190610ffd565b5050509150506402540be40081610a2a9190611078565b915050919050565b828054828255906000526020600020908101928215610aab579160200282015b82811115610aaa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a52565b5b509050610ab89190610abc565b5090565b5b80821115610ad5576000816000905550600101610abd565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0982610ade565b9050919050565b610b1981610afe565b8114610b2457600080fd5b50565b600081359050610b3681610b10565b92915050565b600060208284031215610b5257610b51610ad9565b5b6000610b6084828501610b27565b91505092915050565b6000819050919050565b610b7c81610b69565b82525050565b6000602082019050610b976000830184610b73565b92915050565b610ba681610afe565b82525050565b6000602082019050610bc16000830184610b9d565b92915050565b6000819050919050565b6000610bec610be7610be284610ade565b610bc7565b610ade565b9050919050565b6000610bfe82610bd1565b9050919050565b6000610c1082610bf3565b9050919050565b610c2081610c05565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b610c4a81610b69565b8114610c5557600080fd5b50565b600081359050610c6781610c41565b92915050565b600060208284031215610c8357610c82610ad9565b5b6000610c9184828501610c58565b91505092915050565b600081519050610ca981610c41565b92915050565b600060208284031215610cc557610cc4610ad9565b5b6000610cd384828501610c9a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4582610b69565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7857610d77610d0b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dcd600083610db2565b9150610dd882610dbd565b600082019050919050565b6000610dee82610dc0565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e3f601b83610df8565b9150610e4a82610e09565b602082019050919050565b60006020820190508181036000830152610e6e81610e32565b9050919050565b6000610e8082610b69565b9150610e8b83610b69565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec057610ebf610d0b565b5b828201905092915050565b6000610ed682610b69565b9150610ee183610b69565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f1a57610f19610d0b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5f82610b69565b9150610f6a83610b69565b925082610f7a57610f79610f25565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fa481610f85565b8114610faf57600080fd5b50565b600081519050610fc181610f9b565b92915050565b6000819050919050565b610fda81610fc7565b8114610fe557600080fd5b50565b600081519050610ff781610fd1565b92915050565b600080600080600060a0868803121561101957611018610ad9565b5b600061102788828901610fb2565b955050602061103888828901610fe8565b945050604061104988828901610c9a565b935050606061105a88828901610c9a565b925050608061106b88828901610fb2565b9150509295509295909350565b600061108382610fc7565b915061108e83610fc7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110cd576110cc610d0b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561110a57611109610d0b565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114757611146610d0b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118457611183610d0b565b5b82820290509291505056fea264697066735822122088f2bfb5864f3c10fe8e8d76492d2fd465b236c6643ce73c2b5c197cfc2d5d6064736f6c63430008080033",
  "devdoc": {
    "author": "Pongthorn Sangkaphet",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "Practical Blockchain",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FundMe__NotOwner()": [
        {
          "notice": "This method is allowed only ownere to do"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for study how to develop smart contract on EVM",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}